datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum ActivityBadge {
  BRONZE_1_POST
  BRONZE_10_POSTS
  SILVER_50_POSTS
  SILVER_100_POSTS
  GOLD_200_POSTS
  GOLD_300_POSTS
  PLATINUM_750_POSTS
  PLATINUM_1000_POSTS
  LEGEND_1200_POSTS
  BRONZE_1_VOTES
  BRONZE_10_VOTES
  SILVER_50_VOTES
  SILVER_100_VOTES
  GOLD_200_VOTES
  GOLD_500_VOTES
  PLATINUM_750_VOTES
  PLATINUM_1000_VOTES
  LEGEND_2000_VOTES
  BRONZE_1_COMMENT
  BRONZE_10_COMMENTS
  SILVER_50_COMMENTS
  SILVER_100_COMMENTS
  GOLD_200_COMMENTS
  GOLD_500_COMMENTS
  PLATINUM_750_COMMENTS
  PLATINUM_1000_COMMENTS
  LEGEND_2000_COMMENTS
}

enum Issuestatus {
  OPEN
  CLOSED
  ANSWERED
  FORCE_CLOSED
  INAPPROPRIATE
}

enum Level {
  BRONZE
  SILVER
  GOLD
  PLATINUM
  LEGEND
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

model Issue {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  author            User        @relation(fields: [userId], references: [id])
  userId            String      @db.ObjectId
  label             String
  level             Level
  creation_date     DateTime
  update_date       DateTime
  comments          Int
  issue_status      Issuestatus
  title             String
  body              String
  issue_contributer String[] // This will be a JSON string containing the id and the name of the user. Because mongodb doensot support many-to-many
}

model UserReport {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  author        User     @relation(fields: [userId], references: [id])
  userId        String   @db.ObjectId
  label         String
  moderity      Int
  body          String
  creation_date DateTime
  accepted      Boolean
  seen          Boolean
}

model User {
  id                     String          @id @default(auto()) @map("_id") @db.ObjectId
  name                   String?
  email                  String?         @unique
  emailVerified          String?
  image                  String?
  password               String
  token                  String?
  age                    Int
  role                   Role
  bio                    String
  badges                 ActivityBadge[]
  level                  Level
  verified               Boolean
  TFA                    Boolean
  links                  String[]
  reports                UserReport[]
  issues                 Issue[]
  followerIds            Int[]
  followingIds           Int[]
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
}
