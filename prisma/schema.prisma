datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  createdAt   DateTime      @default(now())
  viewsNumber Int
  likes       Int
  disLikes    Int
  language    String
  reason      ReportType
  status      PostStatus
  updatedAt   DateTime      @updatedAt
  author      User          @relation("UserPosts", fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId    String        @db.ObjectId
  comments    Comment[]     @relation("PostComments")
  bookmarks   Bookmark[]    @relation("PostBookmarks")
  category    Category      @relation("CategoryPosts", fields: [categoryId], references: [id])
  categoryId  String        @db.ObjectId
  postKeywords PostKeyword[] // Join table for Post and Keywords relationship
}

model Keywords {
  id    String        @id @default(auto()) @map("_id") @db.ObjectId
  name  String        @unique
  postKeywords PostKeyword[] // Join table for Keywords and Post relationship
}

model PostKeyword {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  postId     String   @db.ObjectId
  keywordId  String   @db.ObjectId
  post       Post     @relation(fields: [postId], references: [id])
  keyword    Keywords @relation(fields: [keywordId], references: [id])

  @@unique([postId, keywordId])
}


model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String?
  posts       Post[]   @relation("CategoryPosts")
}


model Report {
  id                   String     @id @default(auto()) @map("_id") @db.ObjectId
  description          String
  reportType           ReportType
  severity             Severity
  status               String     @default("Pending")
  resolutionDetails    String
  reportedUser         User       @relation("ReportedUser", fields: [reportedUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reportedUserId       String     @db.ObjectId
  reportingModerator   User       @relation("ReportingModerator", fields: [reportingModeratorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reportingModeratorId String     @db.ObjectId
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation("UserComments", fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  String   @db.ObjectId
  post      Post     @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String   @db.ObjectId
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String       @unique
  emailVerified DateTime
  image         String
  password      String
  token         String
  role          Role         @default(USER)
  bio           String
  verified      Boolean
  links         String[]
  points        Int          @default(100)
  isBanned      Boolean      @default(false)
  isBannedUntil DateTime
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  posts         Post[]       @relation("UserPosts")
  comments      Comment[]    @relation("UserComments")
  reportedBy    Report[]     @relation("ReportingModerator")
  reports       Report[]     @relation("ReportedUser")
  preferences   Preferences?
  bookmarks     Bookmark[]   @relation("UserBookmarks")
}

model Bookmark {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation("UserBookmarks", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @db.ObjectId
  post      Post     @relation("PostBookmarks", fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model Preferences {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId               String  @unique @db.ObjectId
  theme                String?
  notificationsEnabled Boolean @default(true)
}

enum ReportType {
  ABUSE
  SPAM
  HARASSMENT
  OTHER
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum Issuestatus {
  OPEN
  CLOSED
  ANSWERED
  FORCE_CLOSED
  INAPPROPRIATE
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

enum PostStatus {
  ANSWERED
  RESTRICTED
  OPEN
  CLOSED
}